# -*- coding: utf-8 -*-
"""LAB2-SP23-BCS-083.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UO6MKm5a3xcz1j44tdiuS7xImLqdsVea

# Activity 01
"""

myList1 = []
print("Enter objects of first list...")
for i in range(5):
    val = input("Enter a value: ")
    n = int(val)
    myList1.append(n)
myList2 = []
print("Enter objects of second list...")
for i in range(5):
    val = input("Enter a value: ")
    n = int(val)
    myList2.append(n)
list3 = myList1 + myList2
print(list3)

"""# Activity 02"""

def isPalindrome(word):
    temp = word[::-1]
    if temp.capitalize() == word.capitalize():
        return True
    else:
        return False
print(isPalindrome("deed"))

"""# Activity 03"""

a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
b = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]
c = []
for indrow in range(3):
    c.append([])
    for indcol in range(3):
        c[indrow].append(0)
    for indaux in range(3):
        c[indrow][indcol] += a[indrow][indaux] * b[indaux][indcol]
print(c)

"""# Activity 04"""

def perimeter(listing):
    leng = len(listing)
    perimeter = 0
    for i in range(0, leng-1):
        dist = (((listing[i][0]-listing[i+1][0])**2) + ((listing[i][1]-listing[i+1][1])**2))**0.5
        perimeter = perimeter + dist
    perimeter = perimeter + (((listing[0][0]-listing[leng-1][0])**2) + ((listing[0][1]-listing[leng-1][1])**2))**0.5
    return perimeter
L = [(1,3), (2,7), (3,9), (-1,8)]
print(perimeter(L))

"""# Activity 05"""

def symmDiff(a, b):
    e = set()
    for i in a:
        if i not in b:
            e.add(i)
    for i in b:
        if i not in a:
            e.add(i)
    return e
set1 = {0, 1, 2, 4, 5}
set2 = {4, 5, 7, 8, 9}
print(symmDiff(set1, set2))

"""# Activity 06"""

sample = {("sohaib", "ali"): "0246585468445", ("aib", "li"): "02465854645", ("sib", "ai"): "0246585468445"}
firstName = input("enter first name\t")
lastName = input("enter last name\t")
searchTuple = (firstName, lastName)
if searchTuple in sample:
    print(sample[searchTuple])
else:
    print("name not found")

"""# Lab tasks 01"""

list1 = []
list2 = []
merged_list = []
while True:
  s = input("Enter values for list 1:\t")
  num = int(s)
  if num < 0:
    break;
  list1.append(num)
while True:
  s = input("Enter values for list 2:\t")
  num = int(s)
  if num < 0:
    break;
  list2.append(num)

merged_list = list1 + list2
merged_list.sort()
for i in merged_list:
  print(i)

"""# Lab task 02"""

list1 = []
list2 = []
merged_list = []
while True:
  s = input("Enter values for list 1:\t")
  num = int(s)
  if num < 0:
    break;
  list1.append(num)
while True:
  s = input("Enter values for list 2:\t")
  num = int(s)
  if num < 0:
    break;
  list2.append(num)

merged_list = list1 + list2
merged_list.sort()
print("Smallest element = ", merged_list[0])
print("Smallest element = ", merged_list[len(merged_list) -1])

"""# Lab task 03"""

from math import *
x_values = []
derivative_approx = []
increment = 0.001
start = -pi
end = pi
current = start
while current <= end:
    x_values.append(current)
    derivative = (sin(current + increment) - sin(current)) / increment
    derivative_approx.append(derivative)
    current += increment
for i in range(len(x_values)):
    print(f"Derivative approximation at {x_values[i]}: {derivative_approx[i]}, cos(x): {cos(x_values[i])}")
increment = 0.01
x_values.clear()
derivative_approx.clear()
current = start
while current <= end:
    x_values.append(current)
    derivative = (sin(current + increment) - sin(current)) / increment
    derivative_approx.append(derivative)
    current += increment
for i in range(len(x_values)):
    print(f"Derivative approximation at {x_values[i]}: {derivative_approx[i]}, cos(x): {cos(x_values[i])}")
increment = 0.1
x_values.clear()
derivative_approx.clear()
current = start
while current <= end:
    x_values.append(current)
    derivative = (sin(current + increment) - sin(current)) / increment
    derivative_approx.append(derivative)
    current += increment
for i in range(len(x_values)):
    print(f"Derivative approximation at {x_values[i]}: {derivative_approx[i]}, cos(x): {cos(x_values[i])}")

"""# Lab task 04"""

birthday_dict = {"Albert Einstein": "03/14/1879", "Benjamin Franklin": "01/17/1706", "Ada Lovelace": "12/10/1815"}
print("Welcome to the birthday dictionary. We know the birthdays of:")
print("Albert Einstein")
print("Benjamin Franklin")
print("Ada Lovelace")
name_query = input("Who's birthday do you want to look up? ")
if name_query in birthday_dict:
    print(f"{name_query}'s birthday is {birthday_dict[name_query]}")
else:
    print("Name not found")

"""# Lab task 05"""

sample_dict = {"name": "Kelly", "age": 25, "salary": 8000, "city": "New york"}
keys_to_extract = ["name", "salary"]
new_dict = {key: sample_dict[key] for key in keys_to_extract}
print(new_dict)